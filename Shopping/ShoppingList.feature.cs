// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Shopping
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ShoppingList")]
    public partial class ShoppingListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShoppingList.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShoppingList", @"In order to to calculate the total shopping price for scanned items
As a checkout till's printout
I want to be told the sum of products after applying dicount rules
And I wnt an itemised list including the discounts

Rules:
Item   Unit      Special
       Price     Price
--------------------------
  A     50       3 for 130
  B     30       2 for 45   - i.e. buy 1 get one half price
  C     20       2 for 20   - i.e  buy 1 get on free
  D     15", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 17
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Price",
                        "Rule"});
            table1.AddRow(new string[] {
                        "A",
                        "50",
                        "3 > 130"});
            table1.AddRow(new string[] {
                        "B",
                        "30",
                        "2 > 45"});
            table1.AddRow(new string[] {
                        "C",
                        "20",
                        "2 > 20"});
            table1.AddRow(new string[] {
                        "D",
                        "15",
                        ""});
#line 18
    testRunner.Given("the following pricing rules", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Total of 1 simple Item That does not qualify for any discount")]
        public virtual void TotalOf1SimpleItemThatDoesNotQualifyForAnyDiscount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Total of 1 simple Item That does not qualify for any discount", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 27
 testRunner.Given("I have 1 Product \'D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the total price should be 15.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Total of 2 same simple Items That do not qualify for any discount")]
        public virtual void TotalOf2SameSimpleItemsThatDoNotQualifyForAnyDiscount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Total of 2 same simple Items That do not qualify for any discount", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 32
 testRunner.Given("I have 2 Product \'D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the total price should be 30.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order single item which qualify for buy 1 get 1 free")]
        public virtual void OrderSingleItemWhichQualifyForBuy1Get1Free()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order single item which qualify for buy 1 get 1 free", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table2.AddRow(new string[] {
                        "C"});
#line 37
 testRunner.Given("I have the following items:", ((string)(null)), table2, "Given ");
#line 40
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the total price should be 20.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order two items which qualify for buy 1 get 1 free")]
        public virtual void OrderTwoItemsWhichQualifyForBuy1Get1Free()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order two items which qualify for buy 1 get 1 free", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table3.AddRow(new string[] {
                        "C"});
            table3.AddRow(new string[] {
                        "C"});
#line 44
 testRunner.Given("I have the following items:", ((string)(null)), table3, "Given ");
#line 48
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the total price should be 20.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.And("will contain 3 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table4.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table4.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table4.AddRow(new string[] {
                        "C",
                        "2 > 20",
                        "-20"});
#line 51
 testRunner.And("the following will be output:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order four items which qualify for buy 1 get 1 free")]
        public virtual void OrderFourItemsWhichQualifyForBuy1Get1Free()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order four items which qualify for buy 1 get 1 free", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table5.AddRow(new string[] {
                        "C"});
            table5.AddRow(new string[] {
                        "C"});
            table5.AddRow(new string[] {
                        "C"});
            table5.AddRow(new string[] {
                        "C"});
#line 58
 testRunner.Given("I have the following items:", ((string)(null)), table5, "Given ");
#line 64
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("the total price should be 40.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("will contain 6 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table6.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table6.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table6.AddRow(new string[] {
                        "C",
                        "2 > 20",
                        "-20"});
            table6.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table6.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table6.AddRow(new string[] {
                        "C",
                        "2 > 20",
                        "-20"});
#line 67
 testRunner.And("the following will be output:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order five items which qualify for buy 1 get 1 free")]
        public virtual void OrderFiveItemsWhichQualifyForBuy1Get1Free()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order five items which qualify for buy 1 get 1 free", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table7.AddRow(new string[] {
                        "C"});
            table7.AddRow(new string[] {
                        "C"});
            table7.AddRow(new string[] {
                        "C"});
            table7.AddRow(new string[] {
                        "C"});
            table7.AddRow(new string[] {
                        "C"});
#line 77
 testRunner.Given("I have the following items:", ((string)(null)), table7, "Given ");
#line 84
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("the total price should be 60.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order single item which qualify for buy 1 get 1 half price")]
        public virtual void OrderSingleItemWhichQualifyForBuy1Get1HalfPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order single item which qualify for buy 1 get 1 half price", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table8.AddRow(new string[] {
                        "B"});
#line 89
 testRunner.Given("I have the following items:", ((string)(null)), table8, "Given ");
#line 92
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the total price should be 30.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order two items which qualify for buy 1 get 1 half price")]
        public virtual void OrderTwoItemsWhichQualifyForBuy1Get1HalfPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order two items which qualify for buy 1 get 1 half price", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table9.AddRow(new string[] {
                        "B"});
            table9.AddRow(new string[] {
                        "B"});
#line 97
 testRunner.Given("I have the following items:", ((string)(null)), table9, "Given ");
#line 101
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the total price should be 45.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And("will contain 3 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table10.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table10.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table10.AddRow(new string[] {
                        "B",
                        "2 > 45",
                        "-15"});
#line 104
 testRunner.And("the following will be output:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order four items which qualify for buy 1 get 1 half price")]
        public virtual void OrderFourItemsWhichQualifyForBuy1Get1HalfPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order four items which qualify for buy 1 get 1 half price", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table11.AddRow(new string[] {
                        "B"});
            table11.AddRow(new string[] {
                        "B"});
            table11.AddRow(new string[] {
                        "B"});
            table11.AddRow(new string[] {
                        "B"});
#line 111
 testRunner.Given("I have the following items:", ((string)(null)), table11, "Given ");
#line 117
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("the total price should be 90.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order five items which qualify for buy 1 get 1 half price")]
        public virtual void OrderFiveItemsWhichQualifyForBuy1Get1HalfPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order five items which qualify for buy 1 get 1 half price", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table12.AddRow(new string[] {
                        "B"});
            table12.AddRow(new string[] {
                        "B"});
            table12.AddRow(new string[] {
                        "B"});
            table12.AddRow(new string[] {
                        "B"});
            table12.AddRow(new string[] {
                        "B"});
#line 121
 testRunner.Given("I have the following items:", ((string)(null)), table12, "Given ");
#line 128
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.Then("the total price should be 120.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order two items which qualify for buy 3 for £130")]
        public virtual void OrderTwoItemsWhichQualifyForBuy3For130()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order two items which qualify for buy 3 for £130", ((string[])(null)));
#line 131
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table13.AddRow(new string[] {
                        "A"});
            table13.AddRow(new string[] {
                        "A"});
#line 132
 testRunner.Given("I have the following items:", ((string)(null)), table13, "Given ");
#line 136
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("the total price should be 100.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order three items which qualify for buy 3 for £130")]
        public virtual void OrderThreeItemsWhichQualifyForBuy3For130()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order three items which qualify for buy 3 for £130", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table14.AddRow(new string[] {
                        "A"});
            table14.AddRow(new string[] {
                        "A"});
            table14.AddRow(new string[] {
                        "A"});
#line 140
 testRunner.Given("I have the following items:", ((string)(null)), table14, "Given ");
#line 145
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
 testRunner.Then("the total price should be 130.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order 6 items which qualify for buy 3 for £130")]
        public virtual void Order6ItemsWhichQualifyForBuy3For130()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order 6 items which qualify for buy 3 for £130", ((string[])(null)));
#line 148
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table15.AddRow(new string[] {
                        "A"});
            table15.AddRow(new string[] {
                        "A"});
            table15.AddRow(new string[] {
                        "A"});
            table15.AddRow(new string[] {
                        "A"});
            table15.AddRow(new string[] {
                        "A"});
            table15.AddRow(new string[] {
                        "A"});
#line 149
 testRunner.Given("I have the following items:", ((string)(null)), table15, "Given ");
#line 157
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("the total price should be 260.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.And("will contain 8 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "3 > 130",
                        "-20"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table16.AddRow(new string[] {
                        "A",
                        "3 > 130",
                        "-20"});
#line 160
 testRunner.And("the following will be output:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order multiple items that do not qualify for any special discounts results in rec" +
            "eipt with all items and prices")]
        public virtual void OrderMultipleItemsThatDoNotQualifyForAnySpecialDiscountsResultsInReceiptWithAllItemsAndPrices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order multiple items that do not qualify for any special discounts results in rec" +
                    "eipt with all items and prices", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table17.AddRow(new string[] {
                        "A"});
            table17.AddRow(new string[] {
                        "B"});
            table17.AddRow(new string[] {
                        "C"});
#line 173
 testRunner.Given("I have the following items:", ((string)(null)), table17, "Given ");
#line 178
 testRunner.When("I request receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
 testRunner.Then("will contain 3 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table18.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table18.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table18.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
#line 180
 testRunner.And("the following will be output:", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order multiple items that qualify for multiple special discounts results in recei" +
            "pt with all items and prices and discounts")]
        public virtual void OrderMultipleItemsThatQualifyForMultipleSpecialDiscountsResultsInReceiptWithAllItemsAndPricesAndDiscounts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order multiple items that qualify for multiple special discounts results in recei" +
                    "pt with all items and prices and discounts", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table19.AddRow(new string[] {
                        "A"});
            table19.AddRow(new string[] {
                        "B"});
            table19.AddRow(new string[] {
                        "C"});
            table19.AddRow(new string[] {
                        "A"});
            table19.AddRow(new string[] {
                        "B"});
            table19.AddRow(new string[] {
                        "C"});
            table19.AddRow(new string[] {
                        "A"});
            table19.AddRow(new string[] {
                        "B"});
            table19.AddRow(new string[] {
                        "C"});
#line 187
 testRunner.Given("I have the following items:", ((string)(null)), table19, "Given ");
#line 198
 testRunner.When("I request receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 199
 testRunner.Then("will contain 12 receipt items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Desc",
                        "Price"});
            table20.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table20.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table20.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table20.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table20.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table20.AddRow(new string[] {
                        "B",
                        "2 > 45",
                        "-15"});
            table20.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
            table20.AddRow(new string[] {
                        "C",
                        "2 > 20",
                        "-20"});
            table20.AddRow(new string[] {
                        "A",
                        "A",
                        "50"});
            table20.AddRow(new string[] {
                        "A",
                        "3 > 130",
                        "-20"});
            table20.AddRow(new string[] {
                        "B",
                        "B",
                        "30"});
            table20.AddRow(new string[] {
                        "C",
                        "C",
                        "20"});
#line 200
 testRunner.And("the following will be output:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
