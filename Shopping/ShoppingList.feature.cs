// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Shopping
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ShoppingList")]
    public partial class ShoppingListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShoppingList.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShoppingList", @"In order to to calculate the total shopping price
As a checkout till
I want to be told the sum of products

Rules:
Item   Unit      Special
       Price     Price
--------------------------
  A     50       3 for 130
  B     30       2 for 45   - i.e. buy 1 get one half price
  C     20       2 for 20   - i.e  buy 1 get on free
  D     15", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 16
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Price",
                        "Rule"});
            table1.AddRow(new string[] {
                        "A",
                        "50",
                        "3 > 130"});
            table1.AddRow(new string[] {
                        "B",
                        "30",
                        "2 > 45"});
            table1.AddRow(new string[] {
                        "C",
                        "20",
                        "2 > 20"});
            table1.AddRow(new string[] {
                        "D",
                        "15",
                        ""});
#line 17
    testRunner.Given("the following pricing rules", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Total of 1 simple Item That does not qualify for any rules")]
        public virtual void TotalOf1SimpleItemThatDoesNotQualifyForAnyRules()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Total of 1 simple Item That does not qualify for any rules", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 26
 testRunner.Given("I have 1 Product \'D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the total price should be 15.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Total of 2 same simple Items That do not qualify for any rules")]
        public virtual void TotalOf2SameSimpleItemsThatDoNotQualifyForAnyRules()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Total of 2 same simple Items That do not qualify for any rules", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 31
 testRunner.Given("I have 2 Product \'D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the total price should be 30.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Total of Multiple different Items That do not qualify for any rules")]
        public virtual void TotalOfMultipleDifferentItemsThatDoNotQualifyForAnyRules()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Total of Multiple different Items That do not qualify for any rules", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku"});
            table2.AddRow(new string[] {
                        "D"});
            table2.AddRow(new string[] {
                        "A"});
            table2.AddRow(new string[] {
                        "B"});
            table2.AddRow(new string[] {
                        "D"});
#line 36
 testRunner.Given("I have the following items:", ((string)(null)), table2, "Given ");
#line 42
 testRunner.When("I calculate the total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the total price should be 110.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
